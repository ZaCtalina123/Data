#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

const int UP_BUTTON = 2;
const int DOWN_BUTTON = 3;
const char PLAYER_CHAR = 'O';
const char CACTUS_CHAR = '#';
const unsigned long BASE_FRAME_TIME = 1000 / 60;

int playerPos = 0;
int score = 0;
int spawnRate = 20;
int moveInterval = 300;
bool gameOver = false;
unsigned long lastCactusMoveTime = 0;
bool cacti[2][16] = {false};

void setup() {
  pinMode(UP_BUTTON, INPUT_PULLUP);
  pinMode(DOWN_BUTTON, INPUT_PULLUP);
  lcd.init();
  lcd.backlight();
  randomSeed(analogRead(0));
  showStartScreen();
}

void loop() {
  if (gameOver) {
    showGameOver();
    return;
  }

  handleInput();
  
  unsigned long currentTime = millis();
  
  if (currentTime - lastCactusMoveTime > moveInterval) {
    moveCacti();
    lastCactusMoveTime = currentTime;
    checkCollisions();
  }

  static int framesSinceLastCactus = 0;
  if (++framesSinceLastCactus >= spawnRate) {
    generateSafeCactus();
    framesSinceLastCactus = 0;
  }

  drawGame();
  delay(BASE_FRAME_TIME);
}

void generateSafeCactus() {
  // Проверяем последние 3 колонки на правой границе
  bool lastThreeCols[2][3] = {false};
  
  for (int row = 0; row < 2; row++) {
    for (int col = 13; col < 16; col++) {
      lastThreeCols[row][col-13] = cacti[row][col];
    }
  }

  // Определяем, можно ли безопасно добавить кактус
  bool canSpawnTop = true;
  bool canSpawnBottom = true;
  
  // Проверяем последние 3 колонки на каждой строке
  for (int col = 0; col < 3; col++) {
    if (lastThreeCols[0][col]) canSpawnTop = false;
    if (lastThreeCols[1][col]) canSpawnBottom = false;
  }

  // Если обе строки заняты в последних 3 колонках - пропускаем спавн
  if (!canSpawnTop && !canSpawnBottom) {
    return;
  }

  // Выбираем строку для спавна (где есть место)
  int targetRow;
  if (canSpawnTop && canSpawnBottom) {
    targetRow = random(2); // Если обе свободны - случайный выбор
  } else {
    targetRow = canSpawnTop ? 0 : 1; // Иначе выбираем свободную
  }

  // Спавним кактус длиной 1-3, но не создавая непреодолимую стену
  int maxLength = 3;
  for (int col = 15; col >= 13; col--) {
    if (cacti[targetRow][col]) {
      maxLength = 15 - col - 1;
      break;
    }
  }
  
  if (maxLength < 1) return;
  
  int cactusLength = random(1, min(4, maxLength + 1));
  
  // Проверяем, что после спавна останется проход
  bool canSpawn = true;
  for (int i = 15; i > 15 - cactusLength; i--) {
    if (i < 0 || cacti[targetRow][i]) {
      canSpawn = false;
      break;
    }
  }
  
  if (canSpawn) {
    for (int i = 15; i > 15 - cactusLength; i--) {
      if (i >= 0) {
        cacti[targetRow][i] = true;
      }
    }
  }
}

// Остальные функции остаются без изменений
// ... (handleInput, checkCollisions, moveCacti, drawGame и др.)
